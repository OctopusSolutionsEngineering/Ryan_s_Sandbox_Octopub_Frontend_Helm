step "approve-production-release" {
    name = "Approve Production Release"

    action {
        action_type = "Octopus.Manual"
        environments = ["production"]
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Please approve"
        }
    }
}

step "create-namespace-if-not-exists" {
    name = "Create namespace if not exists"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Set varaibles
                $clusterNamespace = $OctopusParameters["Octopub.Helm.Cluster.Namespace"]
                
                # Get existing namespaces
                Write-Host "Retrieving namespaces ..."
                $namespaces = (kubectl get namespaces -o JSON | ConvertFrom-Json)
                
                # Check to see if namespace exists
                if ($null -eq ($namespaces.Items | Where-Object {$_.metadata.name -eq $clusterNamespace}))
                {
                	# Create the namespace
                    Write-Host "Namespace $clusetrNamespace doesn't exist, creating ..."
                    kubectl create namespace $clusterNamespace
                }
                else
                {
                	Write-Host "Namespace $clusterNamespace already exists, moving on ..."
                }
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = "Project.Worker.Pool"
    }
}

step "deploy-octopub-frontend-chart" {
    name = "Deploy Octopub Frontend chart"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.HelmChartUpgrade"
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Helm.ChartDirectory = "helm"
            Octopus.Action.Helm.ClientVersion = "V3"
            Octopus.Action.Helm.Namespace = "#{Octopub.Helm.Cluster.Namespace}"
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Helm.TemplateValuesSources = <<-EOT
                [
                  {
                    "Type": "InlineYaml",
                    "Value": "replicaCount: #{Project.Helm.Replicas}\ningress:\n  enabled: true\n  className: \"nginx\"\n  annotations: {\n\n\n     }\n  hosts:\n    - host: #{Octopub.Helm.Host.Name}\n      paths:\n        - path: /\n          pathType: Prefix\n          \nservice:\n  type: ClusterIP\n  port: 8080\n\nimage:\n  repository: ghcr.io/#{Project.Image.Name}\n  tag: #{Project.Image.Tag}"
                  }
                ]
                EOT
            Octopus.Action.Kubernetes.ResourceStatusCheck = "False"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool_variable = ""

        packages "octopub-frontend" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = "octopussamples/octopub-frontend"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
                ValuesFilePath = ""
            }
        }
    }
}